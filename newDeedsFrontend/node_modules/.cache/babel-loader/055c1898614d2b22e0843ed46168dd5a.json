{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { MagicOutgoingWindowMessage, MagicIncomingWindowMessage } from '@magic-sdk/types';\nimport { createMalformedResponseError, MagicRPCError } from '../core/sdk-exceptions';\nimport { standardizeJsonRpcRequestPayload } from '../core/json-rpc';\nimport { createPromiEvent } from '../util/promise-tools';\n\nvar BaseModule =\n/** @class */\nfunction () {\n  function BaseModule(sdk) {\n    this.sdk = sdk;\n  }\n\n  Object.defineProperty(BaseModule.prototype, \"transport\", {\n    /**\n     * The `PayloadTransport` for the SDK instance registered to this module.\n     */\n    get: function () {\n      return this.sdk.transport;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseModule.prototype, \"overlay\", {\n    /**\n     * The `ViewController` for the SDK instance registered to this module.\n     */\n    get: function () {\n      return this.sdk.overlay;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Emits promisified requests to the Magic `<iframe>` context.\n   */\n\n  BaseModule.prototype.request = function (payload) {\n    var responsePromise = this.transport.post(this.overlay, MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, standardizeJsonRpcRequestPayload(payload)); // PromiEvent-ify the response.\n\n    var promiEvent = createPromiEvent(function (resolve, reject) {\n      responsePromise.then(function (res) {\n        cleanupEvents();\n        if (res.hasError) reject(new MagicRPCError(res.payload.error));else if (res.hasResult) resolve(res.payload.result);else throw createMalformedResponseError();\n      }).catch(function (err) {\n        cleanupEvents();\n        reject(err);\n      });\n    }); // Listen for events from the `<iframe>` associated with the current payload\n    // and emit those to `PromiEvent` subscribers.\n\n    var cleanupEvents = this.transport.on(MagicIncomingWindowMessage.MAGIC_HANDLE_EVENT, function (evt) {\n      var _a;\n\n      var response = evt.data.response;\n\n      if (response.id === payload.id && ((_a = response.result) === null || _a === void 0 ? void 0 : _a.event)) {\n        var _b = response.result,\n            event_1 = _b.event,\n            _c = _b.params,\n            params = _c === void 0 ? [] : _c;\n        promiEvent.emit.apply(promiEvent, __spread([event_1], params));\n      }\n    });\n    return promiEvent;\n  };\n\n  return BaseModule;\n}();\n\nexport { BaseModule };","map":null,"metadata":{},"sourceType":"module"}