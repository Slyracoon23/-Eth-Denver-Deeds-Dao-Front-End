{"ast":null,"code":"import _regeneratorRuntime from \"/home/riley/Documents/card/nft/Eth-Denver-Deeds-Dao-Front-End/newDeedsFrontend/rio_marketplace_reactJS/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport 'regenerator-runtime/runtime.js';\nimport { Web3ReactProvider, useWeb3React } from '@web3-react/core';\nimport React, { useContext, createContext, useState, useEffect, useMemo, useCallback } from 'react';\nimport { Web3Provider } from '@ethersproject/providers';\nimport invariant from 'tiny-invariant';\nimport { formatEther } from '@ethersproject/units';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { Ethereum, Polygon, Fantom, Avalanche } from '@3rdweb/chain-icons';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction getLibrary(provider) {\n  return new Web3Provider(provider, \"any\");\n}\n\nvar ThirdwebContext = /*#__PURE__*/createContext({\n  _inProvider: false,\n  connectors: {},\n  supportedChainIds: []\n});\n\nfunction useThirdwebContext() {\n  var context = useContext(ThirdwebContext);\n  invariant(context._inProvider, \"\\n    Attempting to call useThirdwebContext from outside <ThirdwebProvider>, \\n    did you forget to wrap your application in a <ThirdwebProvider>? \\n  \");\n  return context;\n}\n\nvar ThirdwebWeb3Provider = function ThirdwebWeb3Provider(_ref) {\n  var connectors = _ref.connectors,\n      supportedChainIds = _ref.supportedChainIds,\n      networkMetadata = _ref.networkMetadata,\n      chainAddConfig = _ref.chainAddConfig,\n      children = _ref.children;\n  return /*#__PURE__*/React.createElement(ThirdwebContext.Provider, {\n    value: {\n      _inProvider: true,\n      connectors: connectors,\n      supportedChainIds: supportedChainIds,\n      networkMetadata: networkMetadata,\n      chainAddConfig: chainAddConfig\n    }\n  }, /*#__PURE__*/React.createElement(Web3ReactProvider, {\n    getLibrary: getLibrary\n  }, children));\n};\n\nvar defaultChainAddConfig = {\n  1: {\n    chainId: \"0x\" + Number(1).toString(16),\n    chainName: \"Mainnet\",\n    nativeCurrency: {\n      name: \"Ethereum\",\n      symbol: \"ETH\",\n      decimals: 18\n    },\n    rpcUrls: [\"https://main-light.eth.linkpool.io/\"]\n  },\n  4: {\n    chainId: \"0x\" + Number(4).toString(16),\n    chainName: \"Rinkeby (ETH Testnet)\",\n    nativeCurrency: {\n      name: \"Ethereum\",\n      symbol: \"ETH\",\n      decimals: 18\n    },\n    rpcUrls: [\"https://rinkeby-light.eth.linkpool.io/\"]\n  },\n  137: {\n    chainId: \"0x\" + Number(137).toString(16),\n    chainName: \"Polygon Mainnet (Matic)\",\n    nativeCurrency: {\n      name: \"Matic\",\n      symbol: \"MATIC\",\n      decimals: 18\n    },\n    rpcUrls: [\"https://polygon-rpc.com\"],\n    blockExplorerUrls: [\"https://polygonscan.com\"]\n  },\n  250: {\n    chainId: \"0x\" + Number(250).toString(16),\n    chainName: \"Fantom Opera\",\n    nativeCurrency: {\n      name: \"Fantom\",\n      symbol: \"FTM\",\n      decimals: 18\n    },\n    rpcUrls: [\"https://rpc.ftm.tools\"],\n    blockExplorerUrls: [\"https://ftmscan.com\"]\n  },\n  43114: {\n    chainId: \"0x\" + Number(43114).toString(16),\n    chainName: \"Avalanche Mainnet C-Chain\",\n    nativeCurrency: {\n      name: \"Avalanche\",\n      symbol: \"AVAX\",\n      decimals: 18\n    },\n    rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n    blockExplorerUrls: [\"https://cchain.explorer.avax.network\"]\n  },\n  80001: {\n    chainId: \"0x\" + Number(80001).toString(16),\n    chainName: \"Polygon Mumbai Testnet\",\n    nativeCurrency: {\n      name: \"Matic\",\n      symbol: \"MATIC\",\n      decimals: 18\n    },\n    rpcUrls: [\"https://rpc-mumbai.maticvigil.com\", \"https://rpc-mumbai.matic.today\"],\n    blockExplorerUrls: [\"https://mumbai.polygonscan.com\"]\n  }\n};\n\nfunction useSwitchNetwork() {\n  var _useThirdwebContext = useThirdwebContext(),\n      chainAddConfig = _useThirdwebContext.chainAddConfig;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account;\n\n  _useWeb3React.library;\n  var connector = _useWeb3React.connector,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState(false),\n      isSwitching = _useState[0],\n      setIsSwitching = _useState[1];\n\n  var _useState2 = useState(),\n      switchError = _useState2[0],\n      setSwitchError = _useState2[1];\n\n  var _useState3 = useState(),\n      connectorProvider = _useState3[0],\n      setConnectorProvider = _useState3[1];\n\n  useEffect(function () {\n    var getProvider = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = setConnectorProvider;\n                _context.next = 3;\n                return connector == null ? void 0 : connector.getProvider();\n\n              case 3:\n                _context.t1 = _context.sent;\n                (0, _context.t0)(_context.t1);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getProvider() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (connector) {\n      getProvider();\n    }\n  }, [connector]);\n  useEffect(function () {\n    setSwitchError(null);\n  }, [chainId, account]);\n  var canAttemptSwitch = useMemo(function () {\n    return !!(connectorProvider != null && connectorProvider.request);\n  }, [connectorProvider == null ? void 0 : connectorProvider.request]);\n  var switchNetwork = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newChainId) {\n      var chainHex;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (connectorProvider != null && connectorProvider.request) {\n                _context2.next = 3;\n                break;\n              }\n\n              setSwitchError(new Error(\"No provider available to switch\"));\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              setSwitchError(null);\n\n              if (!(newChainId === chainId)) {\n                _context2.next = 6;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 6:\n              setIsSwitching(true);\n              chainHex = \"0x\" + newChainId.toString(16);\n              _context2.prev = 8;\n              _context2.next = 11;\n              return connectorProvider.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [{\n                  chainId: chainHex\n                }]\n              });\n\n            case 11:\n              _context2.next = 38;\n              break;\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](8);\n\n              if (!(_context2.t0.code === 4902 && chainAddConfig && chainAddConfig[newChainId])) {\n                _context2.next = 26;\n                break;\n              }\n\n              _context2.prev = 16;\n              _context2.next = 19;\n              return connectorProvider.request({\n                method: \"wallet_addEthereumChain\",\n                params: [chainAddConfig[newChainId]]\n              });\n\n            case 19:\n              _context2.next = 24;\n              break;\n\n            case 21:\n              _context2.prev = 21;\n              _context2.t1 = _context2[\"catch\"](16);\n              setSwitchError(_context2.t1);\n\n            case 24:\n              _context2.next = 38;\n              break;\n\n            case 26:\n              if (!(_context2.t0.code === 4902 && defaultChainAddConfig[newChainId])) {\n                _context2.next = 37;\n                break;\n              }\n\n              _context2.prev = 27;\n              _context2.next = 30;\n              return connectorProvider.request({\n                method: \"wallet_addEthereumChain\",\n                params: [defaultChainAddConfig[newChainId]]\n              });\n\n            case 30:\n              _context2.next = 35;\n              break;\n\n            case 32:\n              _context2.prev = 32;\n              _context2.t2 = _context2[\"catch\"](27);\n              setSwitchError(_context2.t2);\n\n            case 35:\n              _context2.next = 38;\n              break;\n\n            case 37:\n              setSwitchError(_context2.t0);\n\n            case 38:\n              _context2.prev = 38;\n              setIsSwitching(false);\n              return _context2.finish(38);\n\n            case 41:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[8, 13, 38, 41], [16, 21], [27, 32]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [chainAddConfig, connectorProvider, chainId]);\n  return {\n    switchNetwork: switchNetwork,\n    canAttemptSwitch: canAttemptSwitch,\n    isSwitching: isSwitching,\n    switchError: switchError\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction useConnectWallet() {\n  var _useWeb3React = useWeb3React(),\n      activate = _useWeb3React.activate;\n\n  var _useThirdwebContext = useThirdwebContext(),\n      connectors = _useThirdwebContext.connectors,\n      supportedChainIds = _useThirdwebContext.supportedChainIds;\n\n  return useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connectorType, connectOptions) {\n      var connectorOptions, _yield$import, InjectedConnector, _yield$import2, MagicConnector, _ref2, email, _connectorOptions, _yield$import3, WalletLinkConnector, _yield$import4, WalletConnectConnector;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              invariant(connectors[connectorType], \"\\n        Invalid connect() call for connector: \" + connectorType + \". \\n        This connector is not defined on the <ThirdwebContext>.\\n      \");\n              connectorOptions = connectors[connectorType] ? _extends({}, connectors[connectorType], {\n                supportedChainIds: supportedChainIds\n              }) : {\n                supportedChainIds: supportedChainIds\n              };\n              _context.t0 = connectorType;\n              _context.next = _context.t0 === \"injected\" ? 5 : _context.t0 === \"magic\" ? 12 : _context.t0 === \"walletlink\" ? 21 : _context.t0 === \"walletconnect\" ? 28 : 35;\n              break;\n\n            case 5:\n              _context.next = 7;\n              return import('@web3-react/injected-connector');\n\n            case 7:\n              _yield$import = _context.sent;\n              InjectedConnector = _yield$import.InjectedConnector;\n              _context.next = 11;\n              return activate(new InjectedConnector(connectorOptions));\n\n            case 11:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 12:\n              _context.next = 14;\n              return import('@web3-react/magic-connector');\n\n            case 14:\n              _yield$import2 = _context.sent;\n              MagicConnector = _yield$import2.MagicConnector;\n              _ref2 = connectOptions, email = _ref2.email;\n              _connectorOptions = connectors[connectorType];\n              _context.next = 20;\n              return activate(new MagicConnector(_extends({}, _connectorOptions, {\n                email: email\n              })));\n\n            case 20:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 21:\n              _context.next = 23;\n              return import('@web3-react/walletlink-connector');\n\n            case 23:\n              _yield$import3 = _context.sent;\n              WalletLinkConnector = _yield$import3.WalletLinkConnector;\n              _context.next = 27;\n              return activate(new WalletLinkConnector(connectorOptions));\n\n            case 27:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 28:\n              _context.next = 30;\n              return import('@web3-react/walletconnect-connector');\n\n            case 30:\n              _yield$import4 = _context.sent;\n              WalletConnectConnector = _yield$import4.WalletConnectConnector;\n              _context.next = 34;\n              return activate(new WalletConnectConnector(connectorOptions));\n\n            case 34:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 35:\n              throw new Error(\"Unsupported connector: \" + connectorType);\n\n            case 36:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [connectors, supportedChainIds, activate]);\n}\n\nvar defaultNetworkMetadata = {\n  1: {\n    chainName: \"Ethereum\",\n    icon: Ethereum,\n    symbol: \"ETH\",\n    isTestnet: false\n  },\n  4: {\n    chainName: \"Rinkeby\",\n    icon: Ethereum,\n    symbol: \"ETH\",\n    isTestnet: true\n  },\n  137: {\n    chainName: \"Polygon\",\n    icon: Polygon,\n    symbol: \"MATIC\",\n    isTestnet: false\n  },\n  250: {\n    chainName: \"Fantom\",\n    icon: Fantom,\n    symbol: \"FTM\",\n    isTestnet: false\n  },\n  43114: {\n    chainName: \"Avalanche\",\n    icon: Avalanche,\n    symbol: \"AVAX\",\n    isTestnet: false\n  },\n  80001: {\n    chainName: \"Mumbai\",\n    icon: Polygon,\n    symbol: \"MATIC\",\n    isTestnet: true\n  }\n};\n\nfunction useWeb3() {\n  var connect = useConnectWallet();\n\n  var _useThirdwebContext = useThirdwebContext(),\n      connectors = _useThirdwebContext.connectors,\n      networkMetadata = _useThirdwebContext.networkMetadata;\n\n  var web3Context = useWeb3React();\n  var library = web3Context.library,\n      connector = web3Context.connector,\n      account = web3Context.account,\n      error = web3Context.error,\n      chainId = web3Context.chainId,\n      deactivate = web3Context.deactivate;\n\n  var _useState = useState(),\n      balance = _useState[0],\n      setBalance = _useState[1];\n\n  useEffect(function () {\n    if (error != null && error.message.includes(\"The user rejected the request.\")) {\n      deactivate();\n    }\n  }, [error, deactivate]);\n  useEffect(function () {\n    var checkInjected = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var injected;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                injected = new InjectedConnector({});\n                _context.next = 3;\n                return injected.isAuthorized();\n\n              case 3:\n                if (!_context.sent) {\n                  _context.next = 5;\n                  break;\n                }\n\n                connect(\"injected\");\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function checkInjected() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    setTimeout(function () {\n      checkInjected();\n    }, 500);\n  }, [connect]);\n  useEffect(function () {\n    var getBalance = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var accountBalance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!account) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 3;\n                return library == null ? void 0 : library.getBalance(account);\n\n              case 3:\n                accountBalance = _context2.sent;\n                setBalance({\n                  value: accountBalance,\n                  formatted: formatEther(accountBalance || 0).slice(0, 6)\n                });\n                _context2.next = 8;\n                break;\n\n              case 7:\n                setBalance({\n                  formatted: \"0.0\"\n                });\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function getBalance() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    getBalance();\n  }, [library, account]);\n  var activeProvider = useMemo(function () {\n    return library == null ? void 0 : library.provider;\n  }, [library == null ? void 0 : library.provider]);\n  var disconnectWallet = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var provider, request;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            provider = activeProvider;\n\n            if (provider) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 3:\n            if (!(provider.isMetaMask && provider.request)) {\n              _context3.next = 10;\n              break;\n            }\n\n            _context3.next = 6;\n            return provider.request({\n              method: \"wallet_requestPermissions\",\n              params: [{\n                eth_accounts: {}\n              }]\n            });\n\n          case 6:\n            request = _context3.sent;\n            return _context3.abrupt(\"return\", request);\n\n          case 10:\n            if (!(connector && connector.close)) {\n              _context3.next = 13;\n              break;\n            }\n\n            connector.close();\n            return _context3.abrupt(\"return\");\n\n          case 13:\n            return _context3.abrupt(\"return\", deactivate());\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), [activeProvider, connector, deactivate]);\n  var getNetworkMetadata = useCallback(function (_chainId) {\n    return networkMetadata && networkMetadata[_chainId] || defaultNetworkMetadata[_chainId] || {\n      chainName: \"\",\n      iconUrl: \"\",\n      symbol: \"\"\n    };\n  }, [networkMetadata]);\n  return useMemo(function () {\n    return {\n      error: error,\n      chainId: chainId,\n      connector: connector,\n      balance: balance,\n      provider: library,\n      activeProvider: activeProvider,\n      // Force no null account\n      address: account || undefined,\n      connectors: Object.keys(connectors),\n      connectWallet: connect,\n      disconnectWallet: disconnectWallet,\n      getNetworkMetadata: getNetworkMetadata\n    };\n  }, [account, chainId, balance, connector, activeProvider, connect, connectors, disconnectWallet, getNetworkMetadata, error, library]);\n}\n\nexport { ThirdwebWeb3Provider, useSwitchNetwork, useThirdwebContext, useWeb3 };","map":null,"metadata":{},"sourceType":"module"}