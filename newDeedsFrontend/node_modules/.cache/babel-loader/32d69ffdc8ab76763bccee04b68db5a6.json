{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TryExtensionLinkDialog = void 0;\n\nconst clsx_1 = __importDefault(require(\"clsx\"));\n\nconst preact_1 = require(\"preact\");\n\nconst hooks_1 = require(\"preact/hooks\");\n\nconst globe_icon_svg_1 = __importDefault(require(\"./icons/globe-icon-svg\"));\n\nconst link_icon_svg_1 = __importDefault(require(\"./icons/link-icon-svg\"));\n\nconst lock_icon_svg_1 = __importDefault(require(\"./icons/lock-icon-svg\"));\n\nconst QRLogo_1 = __importDefault(require(\"./icons/QRLogo\"));\n\nconst QRCode_1 = require(\"./QRCode\");\n\nconst Spinner_1 = require(\"./Spinner\");\n\nconst TryExtensionLinkDialog_css_1 = __importDefault(require(\"./TryExtensionLinkDialog-css\"));\n\nconst TryExtensionLinkDialog = props => {\n  const [isContainerHidden, setContainerHidden] = (0, hooks_1.useState)(!props.isOpen);\n  const [isDialogHidden, setDialogHidden] = (0, hooks_1.useState)(!props.isOpen);\n  (0, hooks_1.useEffect)(() => {\n    const {\n      isOpen\n    } = props;\n    const timers = [window.setTimeout(() => {\n      setDialogHidden(!isOpen);\n    }, 10)];\n\n    if (isOpen) {\n      setContainerHidden(false);\n    } else {\n      timers.push(window.setTimeout(() => {\n        setContainerHidden(true);\n      }, 360));\n    }\n\n    return () => {\n      timers.forEach(window.clearTimeout);\n    };\n  }, [props.isOpen]);\n  return (0, preact_1.h)(\"div\", {\n    class: (0, clsx_1.default)(\"-walletlink-extension-dialog-container\", isContainerHidden && \"-walletlink-extension-dialog-container-hidden\")\n  }, (0, preact_1.h)(\"style\", null, TryExtensionLinkDialog_css_1.default), (0, preact_1.h)(\"div\", {\n    class: (0, clsx_1.default)(\"-walletlink-extension-dialog-backdrop\", isDialogHidden && \"-walletlink-extension-dialog-backdrop-hidden\")\n  }), (0, preact_1.h)(\"div\", {\n    class: \"-walletlink-extension-dialog\"\n  }, (0, preact_1.h)(\"div\", {\n    class: (0, clsx_1.default)(\"-walletlink-extension-dialog-box\", isDialogHidden && \"-walletlink-extension-dialog-box-hidden\")\n  }, (0, preact_1.h)(TryExtensionBox, {\n    onInstallClick: () => {\n      window.open(\"https://api.wallet.coinbase.com/rpc/v2/desktop/chrome\", \"_blank\");\n    }\n  }), !props.connectDisabled ? (0, preact_1.h)(ScanQRBox, {\n    darkMode: props.darkMode,\n    version: props.version,\n    sessionId: props.sessionId,\n    sessionSecret: props.sessionSecret,\n    walletLinkUrl: props.walletLinkUrl,\n    isConnected: props.isConnected,\n    isParentConnection: props.isParentConnection\n  }) : null, props.onCancel && (0, preact_1.h)(CancelButton, {\n    onClick: props.onCancel\n  }))));\n};\n\nexports.TryExtensionLinkDialog = TryExtensionLinkDialog;\n\nconst TryExtensionBox = props => {\n  return (0, preact_1.h)(\"div\", {\n    class: \"-walletlink-extension-dialog-box-top\"\n  }, (0, preact_1.h)(\"div\", {\n    class: \"-walletlink-extension-dialog-box-top-install-region\"\n  }, (0, preact_1.h)(\"h2\", null, \"Try the Coinbase Wallet extension\"), (0, preact_1.h)(\"button\", {\n    onClick: props.onInstallClick\n  }, \"Install\")), (0, preact_1.h)(\"div\", {\n    class: \"-walletlink-extension-dialog-box-top-info-region\"\n  }, (0, preact_1.h)(DescriptionItem, {\n    icon: link_icon_svg_1.default,\n    text: \"Connect to crypto apps with one click\"\n  }), (0, preact_1.h)(DescriptionItem, {\n    icon: lock_icon_svg_1.default,\n    text: \"Your private key is stored securely\"\n  }), (0, preact_1.h)(DescriptionItem, {\n    icon: globe_icon_svg_1.default,\n    text: \"Works with Ethereum, Polygon, and more\"\n  })));\n};\n\nconst ScanQRBox = props => {\n  const serverUrl = window.encodeURIComponent(props.walletLinkUrl);\n  const sessionIdKey = props.isParentConnection ? \"parent-id\" : \"id\";\n  const qrUrl = `${props.walletLinkUrl}/#/link?${sessionIdKey}=${props.sessionId}&secret=${props.sessionSecret}&server=${serverUrl}&v=1`;\n  return (0, preact_1.h)(\"div\", {\n    class: \"-walletlink-extension-dialog-box-bottom\"\n  }, (0, preact_1.h)(\"div\", {\n    class: \"-walletlink-extension-dialog-box-bottom-description-region\"\n  }, (0, preact_1.h)(\"h2\", null, \"Or scan to connect\"), (0, preact_1.h)(\"body\", {\n    class: \"-walletlink-extension-dialog-box-bottom-description\"\n  }, \"Open \", (0, preact_1.h)(\"a\", {\n    href: \"https://wallet.coinbase.com/\"\n  }, \"Coinbase Wallet\"), \" on your mobile phone and scan\")), (0, preact_1.h)(\"div\", {\n    class: \"-walletlink-extension-dialog-box-bottom-qr-region\"\n  }, (0, preact_1.h)(\"div\", {\n    class: \"-walletlink-extension-dialog-box-bottom-qr-wrapper\"\n  }, (0, preact_1.h)(QRCode_1.QRCode, {\n    content: qrUrl,\n    width: 150,\n    height: 150,\n    fgColor: \"#000\",\n    bgColor: \"transparent\",\n    image: {\n      svg: QRLogo_1.default,\n      width: 34,\n      height: 34\n    }\n  })), (0, preact_1.h)(\"input\", {\n    type: \"hidden\",\n    value: qrUrl\n  }), !props.isConnected && (0, preact_1.h)(\"div\", {\n    class: \"-walletlink-extension-dialog-box-bottom-qr-connecting\"\n  }, (0, preact_1.h)(Spinner_1.Spinner, {\n    size: 36,\n    color: \"#000\"\n  }), (0, preact_1.h)(\"p\", null, \"Connecting...\"))));\n};\n\nconst DescriptionItem = props => {\n  return (0, preact_1.h)(\"div\", {\n    class: \"-walletlink-extension-dialog-box-top-description\"\n  }, (0, preact_1.h)(\"div\", {\n    class: \"-walletlink-extension-dialog-box-top-description-icon-wrapper\"\n  }, (0, preact_1.h)(\"img\", {\n    src: props.icon\n  })), (0, preact_1.h)(\"body\", {\n    class: \"-walletlink-extension-dialog-box-top-description-text\"\n  }, props.text));\n};\n\nconst CancelButton = props => (0, preact_1.h)(\"button\", {\n  class: \"-walletlink-extension-dialog-box-cancel\",\n  onClick: props.onClick\n}, (0, preact_1.h)(\"div\", {\n  class: \"-walletlink-extension-dialog-box-cancel-x\"\n}));","map":null,"metadata":{},"sourceType":"script"}