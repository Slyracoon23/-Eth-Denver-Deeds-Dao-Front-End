{"ast":null,"code":"/* eslint-disable no-underscore-dangle, no-param-reassign  */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport semverSatisfies from 'semver/functions/satisfies';\nimport { encodeJSON } from '../util/base64-json';\nimport { createMissingApiKeyError, createReactNativeEndpointConfigurationWarning, createIncompatibleExtensionsError } from './sdk-exceptions';\nimport { AuthModule } from '../modules/auth';\nimport { UserModule } from '../modules/user';\nimport { RPCProviderModule } from '../modules/rpc-provider';\nimport { createURL } from '../util/url';\nimport { Extension } from '../modules/base-extension';\nimport { isEmpty } from '../util/type-guards';\nimport { SDKEnvironment } from './sdk-environment';\n/**\n * Checks if the given `ext` is compatible with the platform & version of Magic\n * SDK currently in use.\n */\n\nfunction checkExtensionCompat(ext) {\n  if (ext.compat) {\n    // Check web compatibility\n    if (SDKEnvironment.sdkName === 'magic-sdk') {\n      return typeof ext.compat['magic-sdk'] === 'string' ? semverSatisfies(SDKEnvironment.version, ext.compat['magic-sdk']) : !!ext.compat['magic-sdk'];\n    } // Check React Native compatibility\n\n    /* istanbul ignore else */\n\n\n    if (SDKEnvironment.sdkName === 'magic-sdk-rn') {\n      return typeof ext.compat['@magic-sdk/react-native'] === 'string' ? semverSatisfies(SDKEnvironment.version, ext.compat['@magic-sdk/react-native']) : !!ext.compat['@magic-sdk/react-native'];\n    } // Else case should be impossible here...\n\n  } // To gracefully support older extensions, we assume\n  // compatibility when the `compat` field is missing.\n\n\n  return true;\n}\n/**\n * Initializes SDK extensions, checks for platform/version compatiblity issues,\n * then consolidates any global configurations provided by those extensions.\n */\n\n\nfunction prepareExtensions(options) {\n  var _this = this;\n\n  var _a;\n\n  var extensions = (_a = options === null || options === void 0 ? void 0 : options.extensions) !== null && _a !== void 0 ? _a : [];\n  var extConfig = {};\n  var incompatibleExtensions = [];\n\n  if (Array.isArray(extensions)) {\n    extensions.forEach(function (ext) {\n      if (checkExtensionCompat(ext)) {\n        ext.init(_this);\n        _this[ext.name] = ext;\n\n        if (ext instanceof Extension.Internal) {\n          if (!isEmpty(ext.config)) extConfig[ext.name] = ext.config;\n        }\n      } else {\n        incompatibleExtensions.push(ext);\n      }\n    });\n  } else {\n    Object.keys(extensions).forEach(function (name) {\n      if (checkExtensionCompat(extensions[name])) {\n        extensions[name].init(_this);\n        var ext = extensions[name];\n        _this[name] = ext;\n\n        if (ext instanceof Extension.Internal) {\n          if (!isEmpty(ext.config)) extConfig[extensions[name].name] = ext.config;\n        }\n      } else {\n        incompatibleExtensions.push(extensions[name]);\n      }\n    });\n  }\n\n  if (incompatibleExtensions.length) {\n    throw createIncompatibleExtensionsError(incompatibleExtensions);\n  }\n\n  return extConfig;\n}\n\nvar SDKBase =\n/** @class */\nfunction () {\n  /**\n   * Creates an instance of Magic SDK.\n   */\n  function SDKBase(apiKey, options) {\n    var _a;\n\n    this.apiKey = apiKey;\n    if (!apiKey) throw createMissingApiKeyError();\n\n    if (SDKEnvironment.target === 'react-native' && (options === null || options === void 0 ? void 0 : options.endpoint)) {\n      createReactNativeEndpointConfigurationWarning().log();\n    }\n\n    var defaultEndpoint = SDKEnvironment.defaultEndpoint,\n        version = SDKEnvironment.version;\n    this.endpoint = createURL((_a = options === null || options === void 0 ? void 0 : options.endpoint) !== null && _a !== void 0 ? _a : defaultEndpoint).origin; // Assign API Modules\n\n    this.auth = new AuthModule(this);\n    this.user = new UserModule(this);\n    this.rpcProvider = new RPCProviderModule(this); // Prepare Extensions\n\n    var extConfig = prepareExtensions.call(this, options); // Build query params for the current `ViewController`\n\n    this.encodedQueryParams = encodeJSON({\n      API_KEY: this.apiKey,\n      DOMAIN_ORIGIN: window.location ? window.location.origin : '',\n      ETH_NETWORK: options === null || options === void 0 ? void 0 : options.network,\n      host: createURL(this.endpoint).host,\n      sdk: SDKEnvironment.sdkName,\n      version: version,\n      ext: isEmpty(extConfig) ? undefined : extConfig,\n      locale: (options === null || options === void 0 ? void 0 : options.locale) || 'en_US'\n    });\n  }\n\n  Object.defineProperty(SDKBase.prototype, \"transport\", {\n    /**\n     * Represents the JSON RPC payload message channel associated with this\n     * `MagicSDK` instance.\n     */\n    get: function () {\n      if (!SDKBase.__transports__.has(this.encodedQueryParams)) {\n        SDKBase.__transports__.set(this.encodedQueryParams, new SDKEnvironment.PayloadTransport(this.endpoint, this.encodedQueryParams));\n      }\n\n      return SDKBase.__transports__.get(this.encodedQueryParams);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SDKBase.prototype, \"overlay\", {\n    /**\n     * Represents the view controller associated with this `MagicSDK` instance.\n     */\n    get: function () {\n      if (!SDKBase.__overlays__.has(this.encodedQueryParams)) {\n        var controller = new SDKEnvironment.ViewController(this.transport, this.endpoint, this.encodedQueryParams);\n\n        SDKBase.__overlays__.set(this.encodedQueryParams, controller);\n      }\n\n      return SDKBase.__overlays__.get(this.encodedQueryParams);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Preloads the Magic view, allowing for faster initial requests in browser\n   * environments. Awaiting the returned promise will signal when the Magic view\n   * has completed loading and is ready for requests.\n   */\n\n  SDKBase.prototype.preload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.overlay.ready];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SDKBase.__transports__ = new Map();\n  SDKBase.__overlays__ = new Map();\n  return SDKBase;\n}();\n\nexport { SDKBase };","map":null,"metadata":{},"sourceType":"module"}