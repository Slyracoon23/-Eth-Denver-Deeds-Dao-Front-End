{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { RPCErrorCode, SDKErrorCode, SDKWarningCode } from '@magic-sdk/types';\nimport { isJsonRpcErrorCode } from '../util/type-guards';\nimport { SDKEnvironment, envNameToNpmName } from './sdk-environment'; // --- Error/warning classes\n\n/**\n * This error type represents internal SDK errors. This could be developer\n * mistakes (or Magic's mistakes), or execution errors unrelated to standard\n * JavaScript exceptions.\n */\n\nvar MagicSDKError =\n/** @class */\nfunction (_super) {\n  __extends(MagicSDKError, _super);\n\n  function MagicSDKError(code, rawMessage) {\n    var _this = _super.call(this, \"Magic SDK Error: [\" + code + \"] \" + rawMessage) || this;\n\n    _this.code = code;\n    _this.rawMessage = rawMessage;\n    _this.__proto__ = Error;\n    Object.setPrototypeOf(_this, MagicSDKError.prototype);\n    return _this;\n  }\n\n  return MagicSDKError;\n}(Error);\n\nexport { MagicSDKError };\n/**\n * This error type communicates exceptions that occur during execution in the\n * Magic `<iframe>` context.\n */\n\nvar MagicRPCError =\n/** @class */\nfunction (_super) {\n  __extends(MagicRPCError, _super);\n\n  function MagicRPCError(sourceError) {\n    var _this = _super.call(this) || this;\n\n    _this.__proto__ = Error;\n    var codeNormalized = Number(sourceError === null || sourceError === void 0 ? void 0 : sourceError.code);\n    _this.rawMessage = (sourceError === null || sourceError === void 0 ? void 0 : sourceError.message) || 'Internal error';\n    _this.code = isJsonRpcErrorCode(codeNormalized) ? codeNormalized : RPCErrorCode.InternalError;\n    _this.message = \"Magic RPC Error: [\" + _this.code + \"] \" + _this.rawMessage;\n    Object.setPrototypeOf(_this, MagicRPCError.prototype);\n    return _this;\n  }\n\n  return MagicRPCError;\n}(Error);\n\nexport { MagicRPCError };\n/**\n * In contrast to `SDKError` objects, this \"warning\" type communicates important\n * context that does not rise to the level of an exception. These should be\n * logged rather than thrown.\n */\n\nvar MagicSDKWarning =\n/** @class */\nfunction () {\n  function MagicSDKWarning(code, rawMessage) {\n    this.code = code;\n    this.rawMessage = rawMessage;\n    this.message = \"Magic SDK Warning: [\" + code + \"] \" + rawMessage;\n  }\n  /**\n   * Logs this warning to the console.\n   */\n\n\n  MagicSDKWarning.prototype.log = function () {\n    console.warn(this.message);\n  };\n\n  return MagicSDKWarning;\n}();\n\nexport { MagicSDKWarning };\n/**\n * This error type is reserved for communicating errors that arise during\n * execution of Magic SDK Extension methods. Compare this to the `SDKError`\n * type, specifically in context of Extensions.\n */\n\nvar MagicExtensionError =\n/** @class */\nfunction (_super) {\n  __extends(MagicExtensionError, _super);\n\n  function MagicExtensionError(ext, code, rawMessage, data) {\n    var _this = _super.call(this, \"Magic Extension Error (\" + ext.name + \"): [\" + code + \"] \" + rawMessage) || this;\n\n    _this.code = code;\n    _this.rawMessage = rawMessage;\n    _this.data = data;\n    _this.__proto__ = Error;\n    Object.setPrototypeOf(_this, MagicExtensionError.prototype);\n    return _this;\n  }\n\n  return MagicExtensionError;\n}(Error);\n\nexport { MagicExtensionError };\n/**\n * In contrast to `MagicExtensionError` objects, this \"warning\" type\n * communicates important context that does not rise to the level of an\n * exception. These should be logged rather than thrown.\n */\n\nvar MagicExtensionWarning =\n/** @class */\nfunction () {\n  function MagicExtensionWarning(ext, code, rawMessage) {\n    this.code = code;\n    this.rawMessage = rawMessage;\n    this.message = \"Magic Extension Warning (\" + ext.name + \"): [\" + code + \"] \" + rawMessage;\n  }\n  /**\n   * Logs this warning to the console.\n   */\n\n\n  MagicExtensionWarning.prototype.log = function () {\n    console.warn(this.message);\n  };\n\n  return MagicExtensionWarning;\n}();\n\nexport { MagicExtensionWarning }; // --- SDK error factories\n\nexport function createMissingApiKeyError() {\n  return new MagicSDKError(SDKErrorCode.MissingApiKey, 'Please provide an API key that you acquired from the Magic developer dashboard.');\n}\nexport function createModalNotReadyError() {\n  return new MagicSDKError(SDKErrorCode.ModalNotReady, 'Modal is not ready.');\n}\nexport function createMalformedResponseError() {\n  return new MagicSDKError(SDKErrorCode.MalformedResponse, 'Response from the Magic iframe is malformed.');\n}\nexport function createExtensionNotInitializedError(member) {\n  return new MagicSDKError(SDKErrorCode.ExtensionNotInitialized, \"Extensions must be initialized with a Magic SDK instance before `Extension.\" + member + \"` can be accessed. Do not invoke `Extension.\" + member + \"` inside an extension constructor.\");\n}\nexport function createWebAuthnNotSupportError() {\n  return new MagicSDKError(SDKErrorCode.WebAuthnNotSupported, 'WebAuthn is not supported in this device.');\n}\nexport function createWebAuthCreateCredentialError(message) {\n  return new MagicSDKError(SDKErrorCode.WebAuthnCreateCredentialError, \"Error creating credential: \" + message);\n}\nexport function createIncompatibleExtensionsError(extensions) {\n  var npmName = envNameToNpmName[SDKEnvironment.sdkName];\n  var msg = \"Some extensions are incompatible with `\" + npmName + \"@\" + SDKEnvironment.version + \"`:\";\n  extensions.filter(function (ext) {\n    return typeof ext.compat !== 'undefined' && ext.compat !== null;\n  }).forEach(function (ext) {\n    var compat = ext.compat[npmName];\n    /* istanbul ignore else */\n\n    if (typeof compat === 'string') {\n      msg += \"\\n  - Extension `\" + ext.name + \"` supports version(s) `\" + compat + \"`\";\n    } else if (!compat) {\n      msg += \"\\n  - Extension `\" + ext.name + \"` does not support \" + SDKEnvironment.target + \" environments.\";\n    } // Else case is irrelevant here here\n    // (we filter out extensions with missing `compat` field)\n\n  });\n  return new MagicSDKError(SDKErrorCode.IncompatibleExtensions, msg);\n}\nexport function createInvalidArgumentError(options) {\n  /**\n   * Parses the argument index (given by `argument`) to attach the correct ordinal suffix.\n   * (i.e.: 1st, 2nd, 3rd, 4th, etc.)\n   */\n  var ordinalSuffix = function (i) {\n    var iAdjusted = i + 1; // Argument is zero-indexed.\n\n    var j = iAdjusted % 10;\n    var k = iAdjusted % 100;\n    if (j === 1 && k !== 11) return iAdjusted + \"st\";\n    if (j === 2 && k !== 12) return iAdjusted + \"nd\";\n    if (j === 3 && k !== 13) return iAdjusted + \"rd\";\n    return iAdjusted + \"th\";\n  };\n\n  return new MagicSDKError(SDKErrorCode.InvalidArgument, \"Invalid \" + ordinalSuffix(options.argument) + \" argument given to `\" + options.procedure + \"`.\\n\" + (\"  Expected: `\" + options.expected + \"`\\n\") + (\"  Received: `\" + options.received + \"`\"));\n} // --- SDK warning factories\n\nexport function createDuplicateIframeWarning() {\n  return new MagicSDKWarning(SDKWarningCode.DuplicateIframe, 'Duplicate iframes found.');\n}\nexport function createSynchronousWeb3MethodWarning() {\n  return new MagicSDKWarning(SDKWarningCode.SyncWeb3Method, 'Non-async web3 methods are deprecated in web3 > 1.0 and are not supported by the Magic web3 provider. Please use an async method instead.');\n}\nexport function createReactNativeEndpointConfigurationWarning() {\n  return new MagicSDKWarning(SDKWarningCode.ReactNativeEndpointConfiguration, \"CUSTOM DOMAINS ARE NOT SUPPORTED WHEN USING MAGIC SDK WITH REACT NATIVE! The `endpoint` parameter SHOULD NOT be provided. The Magic `<iframe>` is automatically wrapped by a WebView pointed at `\" + SDKEnvironment.defaultEndpoint + \"`. Changing this default behavior will lead to unexpected results and potentially security-threatening bugs.\");\n}\nexport function createDeprecationWarning(options) {\n  var method = options.method,\n      removalVersions = options.removalVersions,\n      useInstead = options.useInstead;\n  var npmName = envNameToNpmName[SDKEnvironment.sdkName];\n  var removalVersion = removalVersions[npmName];\n  var useInsteadSuffix = useInstead ? \" Use `\" + useInstead + \"` instead.\" : '';\n  var message = \"`\" + method + \"` will be removed from `\" + npmName + \"` in version `\" + removalVersion + \"`.\" + useInsteadSuffix;\n  return new MagicSDKWarning(SDKWarningCode.DeprecationNotice, message);\n}","map":null,"metadata":{},"sourceType":"module"}