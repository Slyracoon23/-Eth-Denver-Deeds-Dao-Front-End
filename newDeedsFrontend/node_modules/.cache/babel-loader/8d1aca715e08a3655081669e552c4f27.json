{"ast":null,"code":"/*!\nMIT License\n\nCopyright (c) 2018 Arturas Molcanovas <a.molcanovas@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define('localforage-driver-memory', ['exports'], factory) : factory(global.LocalforageDriverMemory = {});\n})(typeof self !== 'undefined' ? self : this, function (exports) {\n  'use strict';\n\n  var _driver = 'localforage-driver-memory';\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n\n  function __values(o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n        i = 0;\n    if (m) return m.call(o);\n    return {\n      next: function () {\n        if (o && i >= o.length) o = void 0;\n        return {\n          value: o && o[i++],\n          done: !o\n        };\n      }\n    };\n  }\n  /*!\n  MIT License\n   Copyright (c) 2018 Arturas Molcanovas <a.molcanovas@gmail.com>\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n   The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n   */\n\n  /**\n   * Abstracts constructing a Blob object, so it also works in older\n   * browsers that don't support the native Blob constructor. (i.e.\n   * old QtWebKit versions, at least).\n   * Abstracts constructing a Blob object, so it also works in older\n   * browsers that don't support the native Blob constructor. (i.e.\n   * old QtWebKit versions, at least).\n   *\n   * @param parts\n   * @param properties\n   */\n\n\n  function createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n\n    try {\n      return new Blob(parts, properties);\n    } catch (e) {\n      if (e.name !== 'TypeError') {\n        throw e;\n      } //tslint:disable-next-line:variable-name\n\n\n      var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n      var builder = new Builder();\n\n      for (var i = 0; i < parts.length; i += 1) {\n        builder.append(parts[i]);\n      }\n\n      return builder.getBlob(properties.type);\n    }\n  }\n\n  var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n  var SERIALIZED_MARKER_LENGTH = \"__lfsc__:\"\n  /* SERIALIZED_MARKER */\n  .length;\n  var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + \"arbf\"\n  /* TYPE_ARRAYBUFFER */\n  .length; //tslint:disable:no-magic-numbers no-bitwise prefer-switch no-unbound-method\n\n  var toString = Object.prototype.toString;\n\n  function stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n      bufferLength--;\n\n      if (serializedString[serializedString.length - 2] === '=') {\n        bufferLength--;\n      }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (var i = 0, p = 0; i < len; i += 4) {\n      var encoded1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n      /* BASE_CHARS */\n      .indexOf(serializedString[i]);\n      var encoded2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n      /* BASE_CHARS */\n      .indexOf(serializedString[i + 1]);\n      var encoded3 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n      /* BASE_CHARS */\n      .indexOf(serializedString[i + 2]);\n      var encoded4 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n      /* BASE_CHARS */\n      .indexOf(serializedString[i + 3]);\n      bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n\n    return buffer;\n  }\n  /**\n   * Converts a buffer to a string to store, serialized, in the backend\n   * storage library.\n   */\n\n\n  function bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n\n    for (var i = 0; i < bytes.length; i += 3) {\n      /*jslint bitwise: true */\n      base64String += \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n      /* BASE_CHARS */\n      [bytes[i] >> 2];\n      base64String += \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n      /* BASE_CHARS */\n      [(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n      base64String += \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n      /* BASE_CHARS */\n      [(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n      base64String += \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n      /* BASE_CHARS */\n      [bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n      base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n      base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n  }\n  /**\n   * Serialize a value, afterwards executing a callback (which usually\n   * instructs the `setItem()` callback/promise to be executed). This is how\n   * we store binary data with localStorage.\n   * @param value\n   * @param callback\n   */\n\n\n  function serialize(value, callback) {\n    var valueType = '';\n\n    if (value) {\n      valueType = toString.call(value);\n    } // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n\n\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString.call(value.buffer) === '[object ArrayBuffer]')) {\n      // Convert binary arrays to a string and prefix the string with\n      // a special marker.\n      var buffer = void 0;\n      var marker = \"__lfsc__:\"\n      /* SERIALIZED_MARKER */\n      ;\n\n      if (value instanceof ArrayBuffer) {\n        buffer = value;\n        marker += \"arbf\"\n        /* TYPE_ARRAYBUFFER */\n        ;\n      } else {\n        buffer = value.buffer;\n\n        if (valueType === '[object Int8Array]') {\n          marker += \"si08\"\n          /* TYPE_INT8ARRAY */\n          ;\n        } else if (valueType === '[object Uint8Array]') {\n          marker += \"ui08\"\n          /* TYPE_UINT8ARRAY */\n          ;\n        } else if (valueType === '[object Uint8ClampedArray]') {\n          marker += \"uic8\"\n          /* TYPE_UINT8CLAMPEDARRAY */\n          ;\n        } else if (valueType === '[object Int16Array]') {\n          marker += \"si16\"\n          /* TYPE_INT16ARRAY */\n          ;\n        } else if (valueType === '[object Uint16Array]') {\n          marker += \"ur16\"\n          /* TYPE_UINT16ARRAY */\n          ;\n        } else if (valueType === '[object Int32Array]') {\n          marker += \"si32\"\n          /* TYPE_INT32ARRAY */\n          ;\n        } else if (valueType === '[object Uint32Array]') {\n          marker += \"ui32\"\n          /* TYPE_UINT32ARRAY */\n          ;\n        } else if (valueType === '[object Float32Array]') {\n          marker += \"fl32\"\n          /* TYPE_FLOAT32ARRAY */\n          ;\n        } else if (valueType === '[object Float64Array]') {\n          marker += \"fl64\"\n          /* TYPE_FLOAT64ARRAY */\n          ;\n        } else {\n          callback(new Error('Failed to get type for BinaryArray'));\n        }\n      }\n\n      callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n      // Convert the blob to a binaryArray and then to a string.\n      var fileReader = new FileReader();\n\n      fileReader.onload = function () {\n        // Backwards-compatible prefix for the blob type.\n        //tslint:disable-next-line:restrict-plus-operands\n        var str = \"~~local_forage_type~\"\n        /* BLOB_TYPE_PREFIX */\n        + value.type + \"~\" + bufferToString(this.result);\n        callback(\"__lfsc__:\"\n        /* SERIALIZED_MARKER */\n        + \"blob\"\n        /* TYPE_BLOB */\n        + str);\n      };\n\n      fileReader.readAsArrayBuffer(value);\n    } else {\n      try {\n        callback(JSON.stringify(value));\n      } catch (e) {\n        console.error('Couldn\\'t convert value into a JSON string: ', value);\n        callback(null, e);\n      }\n    }\n  }\n  /**\n   * Deserialize data we've inserted into a value column/field. We place\n   * special markers into our strings to mark them as encoded; this isn't\n   * as nice as a meta field, but it's the only sane thing we can do whilst\n   * keeping localStorage support intact.\n   *\n   * Oftentimes this will just deserialize JSON content, but if we have a\n   * special marker (SERIALIZED_MARKER, defined above), we will extract\n   * some kind of arraybuffer/binary data/typed array out of the string.\n   * @param value\n   */\n\n\n  function deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== \"__lfsc__:\"\n    /* SERIALIZED_MARKER */\n    ) {\n      return JSON.parse(value);\n    } // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n\n\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n    var blobType; // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n\n    if (type === \"blob\"\n    /* TYPE_BLOB */\n    && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n      var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n      blobType = matcher[1];\n      serializedString = serializedString.substring(matcher[0].length);\n    }\n\n    var buffer = stringToBuffer(serializedString); // Return the right type based on the code/type set during\n    // serialization.\n\n    switch (type) {\n      case \"arbf\"\n      /* TYPE_ARRAYBUFFER */\n      :\n        return buffer;\n\n      case \"blob\"\n      /* TYPE_BLOB */\n      :\n        return createBlob([buffer], {\n          type: blobType\n        });\n\n      case \"si08\"\n      /* TYPE_INT8ARRAY */\n      :\n        return new Int8Array(buffer);\n\n      case \"ui08\"\n      /* TYPE_UINT8ARRAY */\n      :\n        return new Uint8Array(buffer);\n\n      case \"uic8\"\n      /* TYPE_UINT8CLAMPEDARRAY */\n      :\n        return new Uint8ClampedArray(buffer);\n\n      case \"si16\"\n      /* TYPE_INT16ARRAY */\n      :\n        return new Int16Array(buffer);\n\n      case \"ur16\"\n      /* TYPE_UINT16ARRAY */\n      :\n        return new Uint16Array(buffer);\n\n      case \"si32\"\n      /* TYPE_INT32ARRAY */\n      :\n        return new Int32Array(buffer);\n\n      case \"ui32\"\n      /* TYPE_UINT32ARRAY */\n      :\n        return new Uint32Array(buffer);\n\n      case \"fl32\"\n      /* TYPE_FLOAT32ARRAY */\n      :\n        return new Float32Array(buffer);\n\n      case \"fl64\"\n      /* TYPE_FLOAT64ARRAY */\n      :\n        return new Float64Array(buffer);\n\n      default:\n        throw new Error('Unkown type: ' + type);\n    }\n  }\n\n  function clone(obj) {\n    var e_1, _a;\n\n    if (obj === null || typeof obj !== 'object' || 'isActiveClone' in obj) {\n      return obj;\n    }\n\n    var temp = obj instanceof Date ? new Date(obj) : obj.constructor();\n\n    try {\n      for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          obj['isActiveClone'] = null;\n          temp[key] = clone(obj[key]);\n          delete obj['isActiveClone'];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return temp;\n  }\n\n  function getKeyPrefix(options, defaultConfig) {\n    return (options.name || defaultConfig.name) + \"/\" + (options.storeName || defaultConfig.storeName) + \"/\";\n  }\n\n  function executeCallback(promise, callback) {\n    if (callback) {\n      promise.then(function (result) {\n        callback(null, result);\n      }, function (error) {\n        callback(error);\n      });\n    }\n  }\n\n  function getCallback() {\n    var _args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n      return arguments[arguments.length - 1];\n    }\n  } //tslint:disable-next-line:no-ignored-initial-value\n\n\n  function dropInstanceCommon(options, callback) {\n    var _this = this;\n\n    callback = getCallback.apply(this, arguments);\n    options = typeof options !== 'function' && options || {};\n\n    if (!options.name) {\n      var currentConfig = this.config();\n      options.name = options.name || currentConfig.name;\n      options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var promise;\n\n    if (!options.name) {\n      promise = Promise.reject('Invalid arguments');\n    } else {\n      promise = new Promise(function (resolve) {\n        if (!options.storeName) {\n          resolve(options.name + \"/\");\n        } else {\n          resolve(getKeyPrefix(options, _this._defaultConfig));\n        }\n      });\n    }\n\n    return {\n      promise: promise,\n      callback: callback\n    };\n  }\n\n  function normaliseKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n      console.warn(key + \" used as a key, but it is not a string.\");\n      key = String(key);\n    }\n\n    return key;\n  }\n\n  var serialiser = {\n    bufferToString: bufferToString,\n    deserialize: deserialize,\n    serialize: serialize,\n    stringToBuffer: stringToBuffer\n  };\n  var stores = {};\n  /** @internal */\n\n  var Store =\n  /** @class */\n  function () {\n    function Store(kp) {\n      this.kp = kp;\n      this.data = {};\n    }\n\n    Store.resolve = function (kp) {\n      if (!stores[kp]) {\n        stores[kp] = new Store(kp);\n      }\n\n      return stores[kp];\n    };\n\n    Store.prototype.clear = function () {\n      this.data = {};\n    };\n\n    Store.prototype.drop = function () {\n      this.clear();\n      delete stores[this.kp];\n    };\n\n    Store.prototype.get = function (key) {\n      return this.data[key];\n    };\n\n    Store.prototype.key = function (idx) {\n      return this.keys()[idx];\n    };\n\n    Store.prototype.keys = function () {\n      return Object.keys(this.data);\n    };\n\n    Store.prototype.rm = function (k) {\n      delete this.data[k];\n    };\n\n    Store.prototype.set = function (k, v) {\n      this.data[k] = v;\n    };\n\n    return Store;\n  }();\n\n  function _initStorage(options) {\n    var opts = options ? clone(options) : {};\n    var kp = getKeyPrefix(opts, this._defaultConfig);\n    var store = Store.resolve(kp);\n    this._dbInfo = opts;\n    this._dbInfo.serializer = serialiser;\n    this._dbInfo.keyPrefix = kp;\n    this._dbInfo.mStore = store;\n    return Promise.resolve();\n  }\n\n  function clear(callback) {\n    var _this = this;\n\n    var promise = this.ready().then(function () {\n      _this._dbInfo.mStore.clear();\n    });\n    executeCallback(promise, callback);\n    return promise;\n  }\n\n  function dropInstance(_options, _cb) {\n    var _a = dropInstanceCommon.apply(this, arguments),\n        promise = _a.promise,\n        callback = _a.callback;\n\n    var outPromise = promise.then(function (keyPrefix) {\n      Store.resolve(keyPrefix).drop();\n    });\n    executeCallback(outPromise, callback);\n    return promise;\n  }\n\n  function getItem(key$, callback) {\n    var _this = this;\n\n    key$ = normaliseKey(key$);\n    var promise = this.ready().then(function () {\n      var result = _this._dbInfo.mStore.get(key$); // Deserialise if the result is not null or undefined\n\n\n      return result == null ? null : _this._dbInfo.serializer.deserialize(result); //tslint:disable-line:triple-equals\n    });\n    executeCallback(promise, callback);\n    return promise;\n  }\n\n  function iterate(iterator, callback) {\n    var _this = this;\n\n    var promise = this.ready().then(function () {\n      var store = _this._dbInfo.mStore;\n      var keys = store.keys();\n\n      for (var i = 0; i < keys.length; i++) {\n        var value = store.get(keys[i]); // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the\n        // key is likely undefined and we'll pass it straight\n        // to the iterator.\n\n        if (value) {\n          value = _this._dbInfo.serializer.deserialize(value);\n        }\n\n        value = iterator(value, keys[i], i + 1);\n\n        if (value !== undefined) {\n          return value;\n        }\n      }\n    });\n    executeCallback(promise, callback);\n    return promise;\n  }\n\n  function key(idx, callback) {\n    var _this = this;\n\n    var promise = this.ready().then(function () {\n      var result;\n\n      try {\n        result = _this._dbInfo.mStore.key(idx);\n\n        if (result === undefined) {\n          result = null;\n        }\n      } catch (_a) {\n        result = null;\n      }\n\n      return result;\n    });\n    executeCallback(promise, callback);\n    return promise;\n  }\n\n  function keys(callback) {\n    var _this = this;\n\n    var promise = this.ready().then(function () {\n      return _this._dbInfo.mStore.keys();\n    });\n    executeCallback(promise, callback);\n    return promise;\n  }\n\n  function length(callback) {\n    var promise = this.keys().then(function (keys$) {\n      return keys$.length;\n    });\n    executeCallback(promise, callback);\n    return promise;\n  }\n\n  function removeItem(key$, callback) {\n    var _this = this;\n\n    key$ = normaliseKey(key$);\n    var promise = this.ready().then(function () {\n      _this._dbInfo.mStore.rm(key$);\n    });\n    executeCallback(promise, callback);\n    return promise;\n  }\n\n  function setItem(key$, value, callback) {\n    var _this = this;\n\n    key$ = normaliseKey(key$);\n    var promise = this.ready().then(function () {\n      if (value === undefined) {\n        value = null;\n      } // Save the original value to pass to the callback.\n\n\n      var originalValue = value;\n      return new Promise(function (resolve, reject) {\n        _this._dbInfo.serializer.serialize(value, function (value$, error) {\n          if (error) {\n            reject(error);\n          } else {\n            try {\n              _this._dbInfo.mStore.set(key$, value$);\n\n              resolve(originalValue);\n            } catch (e) {\n              reject(e);\n            }\n          }\n        });\n      });\n    });\n    executeCallback(promise, callback);\n    return promise;\n  }\n\n  var _support = true;\n  exports._support = _support;\n  exports._driver = _driver;\n  exports._initStorage = _initStorage;\n  exports.clear = clear;\n  exports.dropInstance = dropInstance;\n  exports.getItem = getItem;\n  exports.iterate = iterate;\n  exports.key = key;\n  exports.keys = keys;\n  exports.length = length;\n  exports.removeItem = removeItem;\n  exports.setItem = setItem;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}