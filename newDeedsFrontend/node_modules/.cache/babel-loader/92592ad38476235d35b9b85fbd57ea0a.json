{"ast":null,"code":"/* eslint-disable consistent-return, prefer-spread */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { MagicOutgoingWindowMessage } from '@magic-sdk/types';\nimport { BaseModule } from '../base-module';\nimport { createInvalidArgumentError, MagicRPCError, createSynchronousWeb3MethodWarning } from '../../core/sdk-exceptions';\nimport { createJsonRpcRequestPayload, standardizeJsonRpcRequestPayload, JsonRpcResponse } from '../../core/json-rpc';\nimport { createTypedEmitter } from '../../util/events';\n\nvar _a = createTypedEmitter(),\n    createBoundEmitterMethod = _a.createBoundEmitterMethod,\n    createChainingEmitterMethod = _a.createChainingEmitterMethod;\n/** */\n\n\nvar RPCProviderModule =\n/** @class */\nfunction (_super) {\n  __extends(RPCProviderModule, _super);\n\n  function RPCProviderModule() {\n    // Implements EIP 1193:\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.isMagic = true;\n    _this.on = createChainingEmitterMethod('on', _this);\n    _this.once = createChainingEmitterMethod('once', _this);\n    _this.addListener = createChainingEmitterMethod('addListener', _this);\n    _this.off = createChainingEmitterMethod('off', _this);\n    _this.removeListener = createChainingEmitterMethod('removeListener', _this);\n    _this.removeAllListeners = createChainingEmitterMethod('removeAllListeners', _this);\n    _this.emit = createBoundEmitterMethod('emit');\n    _this.eventNames = createBoundEmitterMethod('eventNames');\n    _this.listeners = createBoundEmitterMethod('listeners');\n    _this.listenerCount = createBoundEmitterMethod('listenerCount');\n    return _this;\n  }\n  /* eslint-enable prettier/prettier */\n\n\n  RPCProviderModule.prototype.sendAsync = function (payload, onRequestComplete) {\n    if (!onRequestComplete) {\n      throw createInvalidArgumentError({\n        procedure: 'Magic.rpcProvider.sendAsync',\n        argument: 1,\n        expected: 'function',\n        received: onRequestComplete === null ? 'null' : typeof onRequestComplete\n      });\n    }\n\n    if (Array.isArray(payload)) {\n      this.transport.post(this.overlay, MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, payload.map(function (p) {\n        return standardizeJsonRpcRequestPayload(p);\n      })).then(function (batchResponse) {\n        onRequestComplete(null, batchResponse.map(function (response) {\n          return __assign(__assign({}, response.payload), {\n            error: response.hasError ? new MagicRPCError(response.payload.error) : null\n          });\n        }));\n      });\n    } else {\n      var finalPayload = standardizeJsonRpcRequestPayload(payload);\n      this.transport.post(this.overlay, MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, finalPayload).then(function (response) {\n        onRequestComplete(response.hasError ? new MagicRPCError(response.payload.error) : null, response.payload);\n      });\n    }\n  };\n  /* eslint-enable prettier/prettier */\n\n\n  RPCProviderModule.prototype.send = function (payloadOrMethod, onRequestCompleteOrParams) {\n    // Case #1\n    // Web3 >= 1.0.0-beta.38 calls `send` with method and parameters.\n    if (typeof payloadOrMethod === 'string') {\n      var payload = createJsonRpcRequestPayload(payloadOrMethod, Array.isArray(onRequestCompleteOrParams) ? onRequestCompleteOrParams : []);\n      return this.request(payload);\n    } // Case #2\n    // Web3 <= 1.0.0-beta.37 uses `send` with a callback for async queries.\n\n\n    if (Array.isArray(payloadOrMethod) || !!onRequestCompleteOrParams) {\n      /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n      this.sendAsync(payloadOrMethod, onRequestCompleteOrParams);\n      return;\n    } // Case #3\n    // Legacy synchronous methods (unsupported).\n\n\n    var warning = createSynchronousWeb3MethodWarning();\n    warning.log();\n    return new JsonRpcResponse(payloadOrMethod).applyError({\n      code: -32603,\n      message: warning.rawMessage\n    }).payload;\n  };\n\n  RPCProviderModule.prototype.enable = function () {\n    var requestPayload = createJsonRpcRequestPayload('eth_accounts');\n    return this.request(requestPayload);\n  };\n\n  return RPCProviderModule;\n}(BaseModule);\n\nexport { RPCProviderModule };","map":null,"metadata":{},"sourceType":"module"}