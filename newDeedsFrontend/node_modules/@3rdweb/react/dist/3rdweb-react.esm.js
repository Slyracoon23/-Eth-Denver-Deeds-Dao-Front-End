import { ChakraProvider, Tooltip, Flex, Stack, Image, Text, Divider, Button, useClipboard, useToast, ButtonGroup, IconButton, Icon as Icon$1, Heading, Alert, AlertIcon, Input, Spinner, AspectRatio, useDisclosure, usePrevious, Modal, ModalOverlay, ModalContent, ModalCloseButton, ModalBody } from '@chakra-ui/react';
import React, { createContext, useContext, useState, useEffect, useMemo, useCallback } from 'react';
import { Web3Provider } from '@ethersproject/providers';
import { Web3ReactProvider, useWeb3React } from '@web3-react/core';
import invariant from 'tiny-invariant';
import { Icon } from '@chakra-ui/icons';
import { formatEther } from '@ethersproject/units';
import { FiAlertTriangle } from 'react-icons/fi';
import { IoWalletOutline, IoCopy } from 'react-icons/io5';
import { InjectedConnector } from '@web3-react/injected-connector';

const ThirdwebThemeProvider = ({
  theme,
  children
}) => {
  return /*#__PURE__*/React.createElement(ChakraProvider, {
    theme: theme
  }, children);
};

function getLibrary(provider) {
  return new Web3Provider(provider, "any");
}

const ThirdwebContext = /*#__PURE__*/createContext({
  _inProvider: false,
  connectors: {},
  supportedChainIds: []
});
function useThirdwebContext() {
  const context = useContext(ThirdwebContext);
  invariant(context._inProvider, `
    Attempting to call useThirdwebContext from outside <ThirdwebProvider>, 
    did you forget to wrap your application in a <ThirdwebProvider>? 
  `);
  return context;
}
const ThirdwebWeb3Provider = ({
  connectors,
  supportedChainIds,
  networkMetadata,
  chainAddConfig,
  children
}) => {
  return /*#__PURE__*/React.createElement(ThirdwebContext.Provider, {
    value: {
      _inProvider: true,
      connectors,
      supportedChainIds,
      networkMetadata,
      chainAddConfig
    }
  }, /*#__PURE__*/React.createElement(Web3ReactProvider, {
    getLibrary: getLibrary
  }, children));
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

const defaultChainAddConfig = {
  1: {
    chainId: `0x${Number(1).toString(16)}`,
    chainName: "Mainnet",
    nativeCurrency: {
      name: "Ethereum",
      symbol: "ETH",
      decimals: 18
    },
    rpcUrls: ["https://main-light.eth.linkpool.io/"]
  },
  4: {
    chainId: `0x${Number(4).toString(16)}`,
    chainName: "Rinkeby (ETH Testnet)",
    nativeCurrency: {
      name: "Ethereum",
      symbol: "ETH",
      decimals: 18
    },
    rpcUrls: ["https://rinkeby-light.eth.linkpool.io/"]
  },
  137: {
    chainId: `0x${Number(137).toString(16)}`,
    chainName: "Polygon Mainnet (Matic)",
    nativeCurrency: {
      name: "Matic",
      symbol: "MATIC",
      decimals: 18
    },
    rpcUrls: ["https://polygon-rpc.com"],
    blockExplorerUrls: ["https://polygonscan.com"]
  },
  250: {
    chainId: `0x${Number(250).toString(16)}`,
    chainName: "Fantom Opera",
    nativeCurrency: {
      name: "Fantom",
      symbol: "FTM",
      decimals: 18
    },
    rpcUrls: ["https://rpc.ftm.tools"],
    blockExplorerUrls: ["https://ftmscan.com"]
  },
  43114: {
    chainId: `0x${Number(43114).toString(16)}`,
    chainName: "Avalanche Mainnet C-Chain",
    nativeCurrency: {
      name: "Avalanche",
      symbol: "AVAX",
      decimals: 18
    },
    rpcUrls: ["https://api.avax.network/ext/bc/C/rpc"],
    blockExplorerUrls: ["https://cchain.explorer.avax.network"]
  },
  80001: {
    chainId: `0x${Number(80001).toString(16)}`,
    chainName: "Polygon Mumbai Testnet",
    nativeCurrency: {
      name: "Matic",
      symbol: "MATIC",
      decimals: 18
    },
    rpcUrls: ["https://rpc-mumbai.maticvigil.com", "https://rpc-mumbai.matic.today"],
    blockExplorerUrls: ["https://mumbai.polygonscan.com"]
  }
};
function useSwitchNetwork() {
  const {
    chainAddConfig
  } = useThirdwebContext();
  const {
    account,
    library,
    connector,
    chainId
  } = useWeb3React();
  const [isSwitching, setIsSwitching] = useState(false);
  const [switchError, setSwitchError] = useState();
  const [connectorProvider, setConnectorProvider] = useState();
  useEffect(() => {
    const getProvider = async () => {
      setConnectorProvider(await connector?.getProvider());
    };

    if (connector) {
      getProvider();
    }
  }, [connector]);
  useEffect(() => {
    setSwitchError(null);
  }, [chainId, account]);
  const canAttemptSwitch = useMemo(() => {
    return !!connectorProvider?.request;
  }, [connectorProvider?.request]);
  const switchNetwork = useCallback(async newChainId => {
    if (!connectorProvider?.request) {
      setSwitchError(new Error("No provider available to switch"));
      return;
    }

    setSwitchError(null);

    if (newChainId === chainId) {
      return;
    }

    setIsSwitching(true);
    const chainHex = `0x${newChainId.toString(16)}`;

    try {
      await connectorProvider.request({
        method: "wallet_switchEthereumChain",
        params: [{
          chainId: chainHex
        }]
      });
    } catch (_switchError) {
      if (_switchError.code === 4902 && chainAddConfig && chainAddConfig[newChainId]) {
        try {
          await connectorProvider.request({
            method: "wallet_addEthereumChain",
            params: [chainAddConfig[newChainId]]
          });
        } catch (addError) {
          setSwitchError(addError);
        }
      } else if (_switchError.code === 4902 && defaultChainAddConfig[newChainId]) {
        try {
          await connectorProvider.request({
            method: "wallet_addEthereumChain",
            params: [defaultChainAddConfig[newChainId]]
          });
        } catch (addError) {
          setSwitchError(addError);
        }
      } else {
        setSwitchError(_switchError);
      }
    } finally {
      setIsSwitching(false);
    }
  }, [chainAddConfig, connectorProvider, chainId]);
  return {
    switchNetwork,
    canAttemptSwitch,
    isSwitching,
    switchError
  };
}

function useConnectWallet() {
  const {
    activate
  } = useWeb3React();
  const {
    connectors,
    supportedChainIds
  } = useThirdwebContext();
  return useCallback(async (connectorType, connectOptions) => {
    invariant(connectors[connectorType], `
        Invalid connect() call for connector: ${connectorType}. 
        This connector is not defined on the <ThirdwebContext>.
      `);
    const connectorOptions = connectors[connectorType] ? { ...connectors[connectorType],
      supportedChainIds
    } : {
      supportedChainIds
    };

    switch (connectorType) {
      case "injected":
        {
          const {
            InjectedConnector
          } = await import('@web3-react/injected-connector');
          return await activate(new InjectedConnector(connectorOptions));
        }

      case "magic":
        {
          const {
            MagicConnector
          } = await import('@web3-react/magic-connector');
          const {
            email
          } = connectOptions;
          const _connectorOptions = connectors[connectorType];
          return await activate(new MagicConnector({ ..._connectorOptions,
            email
          }));
        }

      case "walletlink":
        {
          const {
            WalletLinkConnector
          } = await import('@web3-react/walletlink-connector');
          return await activate(new WalletLinkConnector(connectorOptions));
        }

      case "walletconnect":
        {
          const {
            WalletConnectConnector
          } = await import('@web3-react/walletconnect-connector');
          return await activate(new WalletConnectConnector(connectorOptions));
        }

      default:
        throw new Error(`Unsupported connector: ${connectorType}`);
    }
  }, [connectors, supportedChainIds, activate]);
}

const defaultNetworkMetadata = {
  1: {
    chainName: "Ethereum",
    iconUrl: "https://ethereum.org/static/4b5288012dc4b32ae7ff21fccac98de1/31987/eth-diamond-black-gray.png",
    symbol: "ETH",
    isTestnet: false
  },
  4: {
    chainName: "Rinkeby",
    iconUrl: "https://ethereum.org/static/4b5288012dc4b32ae7ff21fccac98de1/31987/eth-diamond-black-gray.png",
    symbol: "ETH",
    isTestnet: true
  },
  137: {
    chainName: "Polygon",
    iconUrl: "https://s2.coinmarketcap.com/static/img/coins/64x64/3890.png",
    symbol: "MATIC",
    isTestnet: false
  },
  250: {
    chainName: "Fantom",
    iconUrl: "https://icodrops.com/wp-content/uploads/2018/04/teryT6Hw_400x400.jpg",
    symbol: "FTM",
    isTestnet: false
  },
  43114: {
    chainName: "Avalanche",
    iconUrl: "https://assets.website-files.com/6059b554e81c705f9dd2dd32/60ec6a944b52e3e96e16af68_Avalanche_Square_Red_Circle.png",
    symbol: "AVAX",
    isTestnet: false
  },
  80001: {
    chainName: "Mumbai",
    iconUrl: "https://s2.coinmarketcap.com/static/img/coins/64x64/3890.png",
    symbol: "MATIC",
    isTestnet: true
  }
};
function useWeb3() {
  const connect = useConnectWallet();
  const {
    connectors,
    networkMetadata
  } = useThirdwebContext();
  const web3Context = useWeb3React();
  const {
    library,
    connector,
    account,
    error,
    chainId,
    deactivate
  } = web3Context;
  useEffect(() => {
    if (error?.message.includes("The user rejected the request.")) {
      deactivate();
    }
  }, [error, deactivate]);
  useEffect(() => {
    const checkInjected = async () => {
      const injected = new InjectedConnector({});

      if (await injected.isAuthorized()) {
        connect("injected");
      }
    };

    setTimeout(() => {
      checkInjected();
    }, 500);
  }, [connect]);
  const activeProvider = useMemo(() => {
    return library?.provider;
  }, [library?.provider]);
  const disconnectWallet = useCallback(async () => {
    const provider = activeProvider;

    if (!provider) {
      return;
    }

    if (provider.isMetaMask && provider.request) {
      const request = await provider.request({
        method: "wallet_requestPermissions",
        params: [{
          eth_accounts: {}
        }]
      });
      return request;
    } else {
      if (connector && connector.close) {
        connector.close();
        return;
      }

      return deactivate();
    }
  }, [activeProvider, connector, deactivate]);
  const getNetworkMetadata = useCallback(_chainId => {
    return networkMetadata && networkMetadata[_chainId] || defaultNetworkMetadata[_chainId] || {
      chainName: "",
      iconUrl: "",
      symbol: ""
    };
  }, [networkMetadata]);
  return useMemo(() => ({
    error,
    chainId,
    connector,
    provider: library,
    activeProvider,
    // Force no null account
    address: account || undefined,
    connectors: Object.keys(connectors),
    connectWallet: connect,
    disconnectWallet,
    getNetworkMetadata
  }), [account, chainId, connector, activeProvider, connect, connectors, disconnectWallet, getNetworkMetadata, error, library]);
}

function shortenAddress(str) {
  return `${str.substring(0, 6)}...${str.substring(str.length - 4)}`;
}

const ConnectButton = ({
  onOpen,
  isOpen,
  ...props
}) => {
  const {
    address,
    provider,
    chainId,
    error,
    getNetworkMetadata
  } = useWeb3();
  const {
    switchError
  } = useSwitchNetwork();
  const [renderBalance, setRenderBalance] = useState("");
  useEffect(() => {
    const getBalance = async () => {
      if (address) {
        const balance = await provider?.getBalance(address);
        setRenderBalance(formatEther(balance || 0).slice(0, 6));
      } else {
        setRenderBalance("0.0");
      }
    };

    getBalance();
  }, [provider, address]);
  const networkMetadata = useMemo(() => {
    if (chainId) {
      return getNetworkMetadata(chainId);
    }
  }, [chainId, getNetworkMetadata]);
  return /*#__PURE__*/React.createElement(Tooltip, {
    zIndex: -1,
    hasArrow: true,
    isOpen: !isOpen && (!!error || !!switchError),
    label: switchError ? switchError.message : error ? error.message : address ? "Manage your connected wallet" : "Connect your wallet to get started"
  }, address ? /*#__PURE__*/React.createElement(Flex, _extends({
    borderRadius: "25px",
    borderWidth: "1px",
    borderColor: "gray.300",
    padding: "6px",
    height: "48px",
    align: "center",
    onClick: onOpen,
    cursor: "pointer",
    _hover: {
      borderColor: "#5CC4FF"
    }
  }, props), /*#__PURE__*/React.createElement(Stack, {
    flexShrink: 0,
    direction: "row",
    align: "center",
    pr: 3
  }, networkMetadata?.iconUrl && /*#__PURE__*/React.createElement(Image, {
    height: "36px",
    width: "36px",
    borderRadius: "25px",
    src: networkMetadata.iconUrl
  }), /*#__PURE__*/React.createElement(Stack, {
    textAlign: "left",
    justify: "flex-start",
    spacing: 0
  }, /*#__PURE__*/React.createElement(Text, {
    size: "label.md",
    color: "heading",
    lineHeight: 1
  }, shortenAddress(address)), /*#__PURE__*/React.createElement(Text, {
    color: "gray.500",
    fontSize: "12px",
    lineHeight: 1
  }, networkMetadata?.chainName))), /*#__PURE__*/React.createElement(Divider, {
    borderColor: "gray.300",
    flexShrink: 0,
    orientation: "vertical"
  }), /*#__PURE__*/React.createElement(Text, {
    flexShrink: 0,
    px: 3,
    fontSize: "12px",
    color: "#0098EE",
    lineHeight: "14px"
  }, renderBalance, networkMetadata && networkMetadata.symbol.length > 2 && /*#__PURE__*/React.createElement("br", null), networkMetadata?.symbol)) : /*#__PURE__*/React.createElement(Button, _extends({
    px: 6,
    borderRadius: "8px",
    leftIcon: error || switchError ? /*#__PURE__*/React.createElement(Icon, {
      as: FiAlertTriangle
    }) : /*#__PURE__*/React.createElement(Icon, {
      as: IoWalletOutline
    }),
    onClick: onOpen,
    iconSpacing: 3,
    colorScheme: error || switchError ? "red" : "blue"
  }, props), error || switchError ? "Network Error" : "Connect Wallet"));
};

const AddressCopyButton = ({
  address,
  noIcon,
  ...restButtonProps
}) => {
  const {
    onCopy
  } = useClipboard(address || "");
  const toast = useToast();
  const defaultProps = {
    flexGrow: 0,
    variant: "solid",
    size: "sm",
    fontSize: "md",
    fontWeight: "normal"
  };
  return /*#__PURE__*/React.createElement(Tooltip, {
    hasArrow: true,
    label: "Copy address to clipboard"
  }, /*#__PURE__*/React.createElement(ButtonGroup, _extends({}, defaultProps, restButtonProps, {
    isAttached: true,
    onClick: e => {
      e.stopPropagation();
      e.preventDefault();
      onCopy();
      toast({
        title: "Address copied.",
        status: "success",
        duration: 5000,
        isClosable: true
      });
    }
  }), noIcon ? null : /*#__PURE__*/React.createElement(IconButton, {
    mr: "-px",
    borderRight: "none",
    "aria-label": "Add to friends",
    icon: /*#__PURE__*/React.createElement(Icon$1, {
      as: IoCopy
    })
  }), /*#__PURE__*/React.createElement(Button, null, address && shortenAddress(address))));
};

const ModalConnected = ({
  disableNetworkSwitching
}) => {
  const {
    supportedChainIds
  } = useThirdwebContext();
  const {
    switchError
  } = useSwitchNetwork();
  const {
    chainId,
    connector,
    error,
    address,
    activeProvider,
    disconnectWallet,
    getNetworkMetadata
  } = useWeb3();
  return /*#__PURE__*/React.createElement(Flex, {
    direction: "column"
  }, !disableNetworkSwitching && !connector?.magic && !connector?.walletConnectProvider && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Flex, {
    direction: "column"
  }, /*#__PURE__*/React.createElement(Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600",
    mb: "12px"
  }, "Switch network"), supportedChainIds.filter(cId => !getNetworkMetadata(cId).isTestnet).map((cId, index) => /*#__PURE__*/React.createElement(Network, {
    key: index,
    index: index,
    cId: cId
  })), supportedChainIds.filter(cId => getNetworkMetadata(cId).isTestnet).map((cId, index) => /*#__PURE__*/React.createElement(Network, {
    key: index,
    index: index,
    cId: cId
  }))), /*#__PURE__*/React.createElement(Divider, {
    mt: "32px",
    mb: "24px",
    width: "md",
    alignSelf: "center"
  })), disableNetworkSwitching && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Flex, {
    direction: "column"
  }, /*#__PURE__*/React.createElement(Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600",
    mb: "12px"
  }, "Connected network"), /*#__PURE__*/React.createElement(Network, {
    index: 0,
    cId: chainId || 0
  })), /*#__PURE__*/React.createElement(Divider, {
    mt: "32px",
    mb: "24px",
    width: "md",
    alignSelf: "center"
  })), /*#__PURE__*/React.createElement(Stack, {
    spacing: 4
  }, /*#__PURE__*/React.createElement(Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600"
  }, "Connected wallet"), error || switchError ? /*#__PURE__*/React.createElement(Alert, {
    status: "error",
    borderRadius: "md",
    fontSize: "sm",
    fontWeight: "medium"
  }, /*#__PURE__*/React.createElement(AlertIcon, null), switchError?.message || error?.message) : /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Flex, {
    direction: "column",
    align: "start"
  }, /*#__PURE__*/React.createElement(AddressCopyButton, {
    variant: "outline",
    address: address
  })), /*#__PURE__*/React.createElement(Button, {
    onClick: disconnectWallet,
    variant: "outline",
    ml: "auto",
    size: "sm"
  }, activeProvider?.isMetaMask ? "Switch" : "Disconnect"))));
};

const Network = ({
  index,
  cId
}) => {
  const {
    chainId,
    getNetworkMetadata
  } = useWeb3();
  const {
    switchNetwork
  } = useSwitchNetwork();
  return /*#__PURE__*/React.createElement(Flex, {
    key: index,
    alignSelf: "center",
    onClick: () => switchNetwork(cId),
    align: "center",
    width: "md",
    px: "20px",
    py: "2px",
    cursor: "pointer"
  }, /*#__PURE__*/React.createElement(Flex, {
    width: "100%",
    align: "center",
    borderRadius: "25px",
    padding: "6px",
    justify: "space-between",
    bg: cId === chainId ? "gray.100" : undefined,
    _hover: {
      bg: "gray.200"
    }
  }, /*#__PURE__*/React.createElement(Flex, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Image, {
    src: getNetworkMetadata(cId).iconUrl,
    height: "36px",
    width: "36px",
    borderRadius: "25px"
  }), /*#__PURE__*/React.createElement(Text, {
    ml: "12px",
    fontWeight: "medium",
    fontSize: "14px"
  }, getNetworkMetadata(cId).chainName), getNetworkMetadata(cId).isTestnet && /*#__PURE__*/React.createElement(Text, {
    fontSize: "14px",
    color: "gray.400"
  }, "\xA0(testnet)")), cId === chainId && /*#__PURE__*/React.createElement(Text, {
    color: "blue.400",
    fontSize: "14px",
    mr: "8px"
  }, "Connected")));
};

const ModalDisconnected = () => {
  const [email, setEmail] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const {
    address,
    connectWallet,
    connectors
  } = useWeb3();

  function isEmailValid() {
    const re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  }

  async function connectMagic() {
    if (isEmailValid()) {
      setEmail("");
      setLoading(true);
      await connectWallet("magic", {
        email
      });
      setLoading(false);
    } else {
      setError(true);
    }
  }

  return /*#__PURE__*/React.createElement(Flex, {
    direction: "column"
  }, connectors.includes("magic") && /*#__PURE__*/React.createElement(Stack, {
    spacing: 4
  }, /*#__PURE__*/React.createElement(Heading, {
    as: "h4",
    size: "sm",
    fontWeight: "600"
  }, "Connect with email"), /*#__PURE__*/React.createElement(Flex, {
    direction: "column"
  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Input, {
    value: email,
    onChange: e => {
      setEmail(e.target.value);
      setError(false);
    },
    placeholder: "name@example.com",
    borderRadius: "4px 0px 0px 4px"
  }), /*#__PURE__*/React.createElement(Button, {
    borderRadius: "0px 4px 4px 0px",
    width: "120px",
    onClick: connectMagic
  }, loading ? /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Spinner, null)) : "Connect")), error && /*#__PURE__*/React.createElement(Text, {
    color: "red.400",
    fontSize: "14px",
    mt: "4px"
  }, "Please enter a valid email."))), connectors.includes("magic") && connectors.some(connector => connector !== "magic") && /*#__PURE__*/React.createElement(Divider, {
    mt: "32px",
    mb: "24px",
    width: "md",
    alignSelf: "center"
  }), connectors.some(connector => connector !== "magic") && /*#__PURE__*/React.createElement(Stack, {
    spacing: 4
  }, /*#__PURE__*/React.createElement(Heading, {
    as: "h4",
    size: "sm",
    mt: "0px",
    fontWeight: "600"
  }, "Connect a", address ? " different" : "", " wallet"), connectors.includes("injected") && typeof window !== "undefined" && "ethereum" in window && /*#__PURE__*/React.createElement(Button, {
    display: {
      base: "none",
      sm: "flex"
    },
    size: "lg",
    variant: "outline",
    isFullWidth: true,
    iconSpacing: "auto",
    rightIcon: /*#__PURE__*/React.createElement(AspectRatio, {
      ratio: 1,
      w: 6
    }, /*#__PURE__*/React.createElement(Image, {
      src: "https://thirdweb.com/logos/metamask-fox.svg"
    })),
    onClick: () => connectWallet("injected")
  }, "MetaMask"), connectors.includes("walletconnect") && /*#__PURE__*/React.createElement(Button, {
    size: "lg",
    variant: "outline",
    isFullWidth: true,
    iconSpacing: "auto",
    rightIcon: /*#__PURE__*/React.createElement(AspectRatio, {
      ratio: 1,
      w: 6
    }, /*#__PURE__*/React.createElement(Image, {
      src: "https://thirdweb.com/logos/walletconnect-logo.svg"
    })),
    onClick: () => connectWallet("walletconnect")
  }, "WalletConnect"), connectors.includes("walletlink") && /*#__PURE__*/React.createElement(Button, {
    size: "lg",
    variant: "outline",
    isFullWidth: true,
    iconSpacing: "auto",
    rightIcon: /*#__PURE__*/React.createElement(AspectRatio, {
      ratio: 1,
      w: 6
    }, /*#__PURE__*/React.createElement(Image, {
      src: "https://thirdweb.com/logos/coinbase-wallet-logo.svg"
    })),
    onClick: () => connectWallet("walletlink")
  }, "Coinbase Wallet")));
};

const ConnectWallet = ({
  disableNetworkSwitching,
  ...props
}) => {
  const {
    isOpen,
    onOpen,
    onClose
  } = useDisclosure();
  const {
    chainId,
    address,
    connector,
    error
  } = useWeb3();
  const previousConnector = usePrevious(connector);
  const previousChainId = usePrevious(chainId);
  const previousAddress = usePrevious(address); // if chain id changes, then close modal

  useEffect(() => {
    if (previousChainId !== chainId) {
      onClose();
    }
  }, [chainId, previousChainId, onClose]); // if chain id changes, then close modal

  useEffect(() => {
    if (previousAddress !== address) {
      onClose();
    }
  }, [onClose, previousAddress, address]); // if connector changes, then close modal

  useEffect(() => {
    if (connector && !previousConnector || !connector && previousConnector) {
      onClose();
    }
  }, [connector, onClose, previousConnector]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ConnectButton, _extends({
    isOpen: isOpen,
    onOpen: onOpen
  }, props)), /*#__PURE__*/React.createElement(Modal, {
    isOpen: isOpen,
    onClose: onClose,
    isCentered: true,
    size: "md"
  }, /*#__PURE__*/React.createElement(ModalOverlay, null), /*#__PURE__*/React.createElement(ModalContent, {
    pb: 4,
    bg: "gray.50"
  }, /*#__PURE__*/React.createElement(ModalCloseButton, null), /*#__PURE__*/React.createElement(ModalBody, {
    pt: "24px"
  }, /*#__PURE__*/React.createElement(Flex, {
    direction: "column"
  }, connector && !error ? /*#__PURE__*/React.createElement(ModalConnected, {
    disableNetworkSwitching: disableNetworkSwitching
  }) : /*#__PURE__*/React.createElement(ModalDisconnected, null))))));
};

export { ConnectWallet, ThirdwebThemeProvider, ThirdwebWeb3Provider, useSwitchNetwork, useWeb3 };
